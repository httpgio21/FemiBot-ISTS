from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv
import os
import httpx
import json

# Caminho para o arquivo JSON
with open("dadosIst.json", "r", encoding="utf-8") as f:
    ist_database = json.load(f)

# Carrega vari√°veis do .env
load_dotenv()

API_KEY = os.getenv("GOOGLE_API_KEY")
if not API_KEY:
    raise Exception("A vari√°vel de ambiente GOOGLE_API_KEY deve estar definida")

app = FastAPI()

# Configura√ß√£o CORS para permitir chamadas do frontend React (localhost:5174)
origins = [
    "http://localhost:5173",
    # adicione outros dom√≠nios se precisar
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # dom√≠nios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent"



SYSTEM_PROMPT = """
Voc√™ √© um assistente virtual que responde d√∫vidas sobre ISTs femininas de forma clara, acess√≠vel e emp√°tica, sem dar diagn√≥sticos ou conselhos m√©dicos personalizados. Seu p√∫blico s√£o mulheres, especialmente jovens, buscando informa√ß√µes educativas sobre ISTs, traga mensagens curtas.

Voc√™ conhece e reconhece as seguintes ISTs:
HPV, Clam√≠dia, Gonorreia, S√≠filis, Herpes Genital, Tricomon√≠ase, Candid√≠ase, HIV, AIDS, Hepatite B, Hepatite C, Donovanose, Linfogranuloma Ven√©reo, Uretrite n√£o gonoc√≥cica, Vaginose Bacteriana.

Quando o usu√°rio perguntar sobre uma IST espec√≠fica e mencionar uma categoria (sintomas, transmiss√£o, preven√ß√£o, tratamento, complica√ß√µes), responda **apenas** essa categoria usando os emojis correspondentes:

ü¶† Sintomas:  
‚ö†Ô∏è Complica√ß√µes:  
üíä Tratamento:  
üîÑ Transmiss√£o:  
‚úÖ Preven√ß√£o:

üìå Quando a pergunta mencionar **apenas o nome da IST**, responda com todas as informa√ß√µes dispon√≠veis da seguinte forma, organizadas por emoji:

ü¶† Sintomas:  
‚ö†Ô∏è Complica√ß√µes:  
üíä Tratamento:  
üîÑ Transmiss√£o:  
‚úÖ Preven√ß√£o:

Regras:
- Seja objetivo, simp√°tico e educativo.
- Nunca forne√ßa diagn√≥sticos. Sempre recomende que a usu√°ria procure um profissional de sa√∫de.
- Se os sintomas n√£o corresponderem diretamente a uma IST do banco de dados, oriente a usu√°ria a buscar avalia√ß√£o m√©dica especializada.
- Use linguagem clara e compreens√≠vel.
- Responda em t√≥picos curtos e diretos.
- D√™ a sauda√ß√£o ("üëã Ol√°!") apenas na primeira intera√ß√£o.

‚ö†Ô∏è Lembre sempre de procurar um m√©dico
"""



class MessageRequest(BaseModel):
    message: str

@app.post("/chat/")
async def chat(request: MessageRequest):
    params = {
        "key": API_KEY
    }
    
    json_data = {
        "contents": [
            {
                "parts": [
                    {"text": SYSTEM_PROMPT},       # prompt fixo
                    {"text": request.message}      # mensagem do usu√°rio
                ]
            }
        ]
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(GEMINI_API_URL, params=params, json=json_data)

    if response.status_code != 200:
        raise HTTPException(status_code=response.status_code, detail=response.text)

    data = response.json()

    try:
        reply = data["candidates"][0]["content"]["parts"][0]["text"]
    except (KeyError, IndexError):
        raise HTTPException(status_code=500, detail="Resposta inesperada da API Gemini")

    return {"reply": reply}
